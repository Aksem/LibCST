# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.


# This file was generated by libcst.codegen.gen_matcher_classes
from typing import TYPE_CHECKING, Union

import libcst as cst
from libcst.matchers._base import (
    BaseAssignTargetExpression,
    BaseAugOp,
    BaseBinaryOp,
    BaseBooleanOp,
    BaseCompOp,
    BaseCompoundStatement,
    BaseDelTargetExpression,
    BaseDictElement,
    BaseElement,
    BaseExpression,
    BaseFormattedStringContent,
    BaseParenthesizableWhitespace,
    BaseSlice,
    BaseSmallStatement,
    BaseStatement,
    BaseSuite,
    BaseUnaryOp,
)
from libcst.matchers._matcher_base import (
    MatchIfTrue,
    MatchMetadata,
    MatchMetadataIfTrue,
)

if TYPE_CHECKING:
    from libcst.matchers.nodes._annotation import Annotation
    from libcst.matchers.nodes._arg import Arg
    from libcst.matchers.nodes._assign_equal import AssignEqual
    from libcst.matchers.nodes._assign_target import AssignTarget
    from libcst.matchers.nodes._attribute import Attribute
    from libcst.matchers.nodes._bit_or import BitOr
    from libcst.matchers.nodes._colon import Colon
    from libcst.matchers.nodes._comma import Comma
    from libcst.matchers.nodes._comp_for import CompFor
    from libcst.matchers.nodes._comp_if import CompIf
    from libcst.matchers.nodes._comparison_target import ComparisonTarget
    from libcst.matchers.nodes._concatenated_string import ConcatenatedString
    from libcst.matchers.nodes._decorator import Decorator
    from libcst.matchers.nodes._dot import Dot
    from libcst.matchers.nodes._else import Else
    from libcst.matchers.nodes._empty_line import EmptyLine
    from libcst.matchers.nodes._except_handler import ExceptHandler
    from libcst.matchers.nodes._except_star_handler import ExceptStarHandler
    from libcst.matchers.nodes._formatted_string import FormattedString
    from libcst.matchers.nodes._from import From
    from libcst.matchers.nodes._if import If
    from libcst.matchers.nodes._import_alias import ImportAlias
    from libcst.matchers.nodes._left_curly_brace import LeftCurlyBrace
    from libcst.matchers.nodes._left_paren import LeftParen
    from libcst.matchers.nodes._left_square_bracket import LeftSquareBracket
    from libcst.matchers.nodes._list import List
    from libcst.matchers.nodes._match_case import MatchCase
    from libcst.matchers.nodes._match_keyword_element import MatchKeywordElement
    from libcst.matchers.nodes._match_mapping_element import MatchMappingElement
    from libcst.matchers.nodes._match_or_element import MatchOrElement
    from libcst.matchers.nodes._match_pattern import MatchPattern
    from libcst.matchers.nodes._match_sequence_element import MatchSequenceElement
    from libcst.matchers.nodes._match_star import MatchStar
    from libcst.matchers.nodes._name import Name
    from libcst.matchers.nodes._name_item import NameItem
    from libcst.matchers.nodes._newline import Newline
    from libcst.matchers.nodes._param import Param
    from libcst.matchers.nodes._param_slash import ParamSlash
    from libcst.matchers.nodes._param_spec import ParamSpec
    from libcst.matchers.nodes._param_star import ParamStar
    from libcst.matchers.nodes._parameters import Parameters
    from libcst.matchers.nodes._right_curly_brace import RightCurlyBrace
    from libcst.matchers.nodes._right_paren import RightParen
    from libcst.matchers.nodes._right_square_bracket import RightSquareBracket
    from libcst.matchers.nodes._semicolon import Semicolon
    from libcst.matchers.nodes._simple_statement_line import SimpleStatementLine
    from libcst.matchers.nodes._simple_string import SimpleString
    from libcst.matchers.nodes._simple_whitespace import SimpleWhitespace
    from libcst.matchers.nodes._subscript_element import SubscriptElement
    from libcst.matchers.nodes._trailing_whitespace import TrailingWhitespace
    from libcst.matchers.nodes._tuple import Tuple
    from libcst.matchers.nodes._type_param import TypeParam
    from libcst.matchers.nodes._type_var import TypeVar
    from libcst.matchers.nodes._type_var_tuple import TypeVarTuple
    from libcst.matchers.nodes._with_item import WithItem

MetadataMatchType = Union[MatchMetadata, MatchMetadataIfTrue]


BaseParenthesizableWhitespaceMatchType = Union[
    "BaseParenthesizableWhitespace",
    MetadataMatchType,
    MatchIfTrue[cst.BaseParenthesizableWhitespace],
]


BaseAssignTargetExpressionMatchType = Union[
    "BaseAssignTargetExpression",
    MetadataMatchType,
    MatchIfTrue[cst.BaseAssignTargetExpression],
]
AnnotationMatchType = Union[
    "Annotation", MetadataMatchType, MatchIfTrue[cst.Annotation]
]
AssignEqualMatchType = Union[
    "AssignEqual", MetadataMatchType, MatchIfTrue[cst.AssignEqual]
]
SemicolonMatchType = Union["Semicolon", MetadataMatchType, MatchIfTrue[cst.Semicolon]]


BaseExpressionMatchType = Union[
    "BaseExpression", MetadataMatchType, MatchIfTrue[cst.BaseExpression]
]


CommaMatchType = Union["Comma", MetadataMatchType, MatchIfTrue[cst.Comma]]


NameOrTupleOrListMatchType = Union[
    "Name",
    "Tuple",
    "List",
    MetadataMatchType,
    MatchIfTrue[Union[cst.Name, cst.Tuple, cst.List]],
]


SimpleWhitespaceMatchType = Union[
    "SimpleWhitespace", MetadataMatchType, MatchIfTrue[cst.SimpleWhitespace]
]


AssignTargetMatchType = Union[
    "AssignTarget", MetadataMatchType, MatchIfTrue[cst.AssignTarget]
]


NameMatchType = Union["Name", MetadataMatchType, MatchIfTrue[cst.Name]]
DotMatchType = Union["Dot", MetadataMatchType, MatchIfTrue[cst.Dot]]
LeftParenMatchType = Union["LeftParen", MetadataMatchType, MatchIfTrue[cst.LeftParen]]
RightParenMatchType = Union[
    "RightParen", MetadataMatchType, MatchIfTrue[cst.RightParen]
]


BaseAugOpMatchType = Union["BaseAugOp", MetadataMatchType, MatchIfTrue[cst.BaseAugOp]]


BaseBinaryOpMatchType = Union[
    "BaseBinaryOp", MetadataMatchType, MatchIfTrue[cst.BaseBinaryOp]
]


BaseBooleanOpMatchType = Union[
    "BaseBooleanOp", MetadataMatchType, MatchIfTrue[cst.BaseBooleanOp]
]


ArgMatchType = Union["Arg", MetadataMatchType, MatchIfTrue[cst.Arg]]


BaseSuiteMatchType = Union["BaseSuite", MetadataMatchType, MatchIfTrue[cst.BaseSuite]]
DecoratorMatchType = Union["Decorator", MetadataMatchType, MatchIfTrue[cst.Decorator]]
EmptyLineMatchType = Union["EmptyLine", MetadataMatchType, MatchIfTrue[cst.EmptyLine]]


strMatchType = Union[str, MetadataMatchType, MatchIfTrue[str]]


CompIfMatchType = Union["CompIf", MetadataMatchType, MatchIfTrue[cst.CompIf]]


ComparisonTargetMatchType = Union[
    "ComparisonTarget", MetadataMatchType, MatchIfTrue[cst.ComparisonTarget]
]


BaseCompOpMatchType = Union[
    "BaseCompOp", MetadataMatchType, MatchIfTrue[cst.BaseCompOp]
]


SimpleStringOrFormattedStringMatchType = Union[
    "SimpleString",
    "FormattedString",
    MetadataMatchType,
    MatchIfTrue[Union[cst.SimpleString, cst.FormattedString]],
]
SimpleStringOrFormattedStringOrConcatenatedStringMatchType = Union[
    "SimpleString",
    "FormattedString",
    "ConcatenatedString",
    MetadataMatchType,
    MatchIfTrue[Union[cst.SimpleString, cst.FormattedString, cst.ConcatenatedString]],
]


TrailingWhitespaceMatchType = Union[
    "TrailingWhitespace", MetadataMatchType, MatchIfTrue[cst.TrailingWhitespace]
]


BaseDelTargetExpressionMatchType = Union[
    "BaseDelTargetExpression",
    MetadataMatchType,
    MatchIfTrue[cst.BaseDelTargetExpression],
]


BaseDictElementMatchType = Union[
    "BaseDictElement", MetadataMatchType, MatchIfTrue[cst.BaseDictElement]
]
LeftCurlyBraceMatchType = Union[
    "LeftCurlyBrace", MetadataMatchType, MatchIfTrue[cst.LeftCurlyBrace]
]
RightCurlyBraceMatchType = Union[
    "RightCurlyBrace", MetadataMatchType, MatchIfTrue[cst.RightCurlyBrace]
]


CompForMatchType = Union["CompFor", MetadataMatchType, MatchIfTrue[cst.CompFor]]


boolMatchType = Union[bool, MetadataMatchType, MatchIfTrue[bool]]
NewlineMatchType = Union["Newline", MetadataMatchType, MatchIfTrue[cst.Newline]]


BaseFormattedStringContentMatchType = Union[
    "BaseFormattedStringContent",
    MetadataMatchType,
    MatchIfTrue[cst.BaseFormattedStringContent],
]


ParametersMatchType = Union[
    "Parameters", MetadataMatchType, MatchIfTrue[cst.Parameters]
]


NameItemMatchType = Union["NameItem", MetadataMatchType, MatchIfTrue[cst.NameItem]]


IfOrElseOrNoneMatchType = Union[
    "If", "Else", None, MetadataMatchType, MatchIfTrue[Union[cst.If, cst.Else, None]]
]


ImportAliasMatchType = Union[
    "ImportAlias", MetadataMatchType, MatchIfTrue[cst.ImportAlias]
]


AttributeOrNameMatchType = Union[
    "Attribute", "Name", MetadataMatchType, MatchIfTrue[Union[cst.Attribute, cst.Name]]
]


AttributeOrNameOrNoneMatchType = Union[
    "Attribute",
    "Name",
    None,
    MetadataMatchType,
    MatchIfTrue[Union[cst.Attribute, cst.Name, None]],
]


BaseStatementMatchType = Union[
    "BaseStatement", MetadataMatchType, MatchIfTrue[cst.BaseStatement]
]


ColonMatchType = Union["Colon", MetadataMatchType, MatchIfTrue[cst.Colon]]


BaseElementMatchType = Union[
    "BaseElement", MetadataMatchType, MatchIfTrue[cst.BaseElement]
]
LeftSquareBracketMatchType = Union[
    "LeftSquareBracket", MetadataMatchType, MatchIfTrue[cst.LeftSquareBracket]
]
RightSquareBracketMatchType = Union[
    "RightSquareBracket", MetadataMatchType, MatchIfTrue[cst.RightSquareBracket]
]


MatchCaseMatchType = Union["MatchCase", MetadataMatchType, MatchIfTrue[cst.MatchCase]]


MatchPatternMatchType = Union[
    "MatchPattern", MetadataMatchType, MatchIfTrue[cst.MatchPattern]
]


MatchSequenceElementMatchType = Union[
    "MatchSequenceElement", MetadataMatchType, MatchIfTrue[cst.MatchSequenceElement]
]
MatchKeywordElementMatchType = Union[
    "MatchKeywordElement", MetadataMatchType, MatchIfTrue[cst.MatchKeywordElement]
]


MatchSequenceElementOrMatchStarMatchType = Union[
    "MatchSequenceElement",
    "MatchStar",
    MetadataMatchType,
    MatchIfTrue[Union[cst.MatchSequenceElement, cst.MatchStar]],
]


MatchMappingElementMatchType = Union[
    "MatchMappingElement", MetadataMatchType, MatchIfTrue[cst.MatchMappingElement]
]


MatchOrElementMatchType = Union[
    "MatchOrElement", MetadataMatchType, MatchIfTrue[cst.MatchOrElement]
]


BitOrMatchType = Union["BitOr", MetadataMatchType, MatchIfTrue[cst.BitOr]]


SimpleStatementLineOrBaseCompoundStatementMatchType = Union[
    "SimpleStatementLine",
    "BaseCompoundStatement",
    MetadataMatchType,
    MatchIfTrue[Union[cst.SimpleStatementLine, cst.BaseCompoundStatement]],
]


ParamMatchType = Union["Param", MetadataMatchType, MatchIfTrue[cst.Param]]
ParamOrParamStarMatchType = Union[
    "Param",
    "ParamStar",
    MetadataMatchType,
    MatchIfTrue[Union[cst.Param, cst.ParamStar]],
]
ParamSlashMatchType = Union[
    "ParamSlash", MetadataMatchType, MatchIfTrue[cst.ParamSlash]
]


BaseSmallStatementMatchType = Union[
    "BaseSmallStatement", MetadataMatchType, MatchIfTrue[cst.BaseSmallStatement]
]


SubscriptElementMatchType = Union[
    "SubscriptElement", MetadataMatchType, MatchIfTrue[cst.SubscriptElement]
]


BaseSliceMatchType = Union["BaseSlice", MetadataMatchType, MatchIfTrue[cst.BaseSlice]]


ExceptHandlerMatchType = Union[
    "ExceptHandler", MetadataMatchType, MatchIfTrue[cst.ExceptHandler]
]


ExceptStarHandlerMatchType = Union[
    "ExceptStarHandler", MetadataMatchType, MatchIfTrue[cst.ExceptStarHandler]
]


TypeVarOrTypeVarTupleOrParamSpecMatchType = Union[
    "TypeVar",
    "TypeVarTuple",
    "ParamSpec",
    MetadataMatchType,
    MatchIfTrue[Union[cst.TypeVar, cst.TypeVarTuple, cst.ParamSpec]],
]


TypeParamMatchType = Union["TypeParam", MetadataMatchType, MatchIfTrue[cst.TypeParam]]


BaseUnaryOpMatchType = Union[
    "BaseUnaryOp", MetadataMatchType, MatchIfTrue[cst.BaseUnaryOp]
]


WithItemMatchType = Union["WithItem", MetadataMatchType, MatchIfTrue[cst.WithItem]]


BaseExpressionOrFromOrNoneMatchType = Union[
    "BaseExpression",
    "From",
    None,
    MetadataMatchType,
    MatchIfTrue[Union[cst.BaseExpression, cst.From, None]],
]
