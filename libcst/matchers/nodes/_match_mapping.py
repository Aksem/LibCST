# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.


# This file was generated by libcst.codegen.gen_matcher_classes
from dataclasses import dataclass
from typing import Optional, Sequence, Union

import libcst as cst
from libcst.matchers._match_types import (
    LeftCurlyBraceMatchType,
    LeftParenMatchType,
    MatchMappingElementMatchType,
    MetadataMatchType,
    RightCurlyBraceMatchType,
    RightParenMatchType,
    SimpleWhitespaceMatchType,
)
from libcst.matchers._matcher_base import (
    AllOf,
    AtLeastN,
    AtMostN,
    BaseMatcherNode,
    DoNotCare,
    DoNotCareSentinel,
    MatchIfTrue,
    OneOf,
)
from libcst.matchers.nodes._comma import Comma
from libcst.matchers.nodes._name import Name


@dataclass(frozen=True, eq=False, unsafe_hash=False)
class MatchMapping(BaseMatcherNode):
    elements: Union[
        Sequence[
            Union[
                MatchMappingElementMatchType,
                DoNotCareSentinel,
                OneOf[MatchMappingElementMatchType],
                AllOf[MatchMappingElementMatchType],
                AtLeastN[
                    Union[
                        MatchMappingElementMatchType,
                        DoNotCareSentinel,
                        OneOf[MatchMappingElementMatchType],
                        AllOf[MatchMappingElementMatchType],
                    ]
                ],
                AtMostN[
                    Union[
                        MatchMappingElementMatchType,
                        DoNotCareSentinel,
                        OneOf[MatchMappingElementMatchType],
                        AllOf[MatchMappingElementMatchType],
                    ]
                ],
            ]
        ],
        DoNotCareSentinel,
        MatchIfTrue[Sequence[cst.MatchMappingElement]],
        OneOf[
            Union[
                Sequence[
                    Union[
                        MatchMappingElementMatchType,
                        OneOf[MatchMappingElementMatchType],
                        AllOf[MatchMappingElementMatchType],
                        AtLeastN[
                            Union[
                                MatchMappingElementMatchType,
                                OneOf[MatchMappingElementMatchType],
                                AllOf[MatchMappingElementMatchType],
                            ]
                        ],
                        AtMostN[
                            Union[
                                MatchMappingElementMatchType,
                                OneOf[MatchMappingElementMatchType],
                                AllOf[MatchMappingElementMatchType],
                            ]
                        ],
                    ]
                ],
                MatchIfTrue[Sequence[cst.MatchMappingElement]],
            ]
        ],
        AllOf[
            Union[
                Sequence[
                    Union[
                        MatchMappingElementMatchType,
                        OneOf[MatchMappingElementMatchType],
                        AllOf[MatchMappingElementMatchType],
                        AtLeastN[
                            Union[
                                MatchMappingElementMatchType,
                                OneOf[MatchMappingElementMatchType],
                                AllOf[MatchMappingElementMatchType],
                            ]
                        ],
                        AtMostN[
                            Union[
                                MatchMappingElementMatchType,
                                OneOf[MatchMappingElementMatchType],
                                AllOf[MatchMappingElementMatchType],
                            ]
                        ],
                    ]
                ],
                MatchIfTrue[Sequence[cst.MatchMappingElement]],
            ]
        ],
    ] = DoNotCare()
    lbrace: Union[
        LeftCurlyBraceMatchType,
        DoNotCareSentinel,
        OneOf[LeftCurlyBraceMatchType],
        AllOf[LeftCurlyBraceMatchType],
    ] = DoNotCare()
    rbrace: Union[
        RightCurlyBraceMatchType,
        DoNotCareSentinel,
        OneOf[RightCurlyBraceMatchType],
        AllOf[RightCurlyBraceMatchType],
    ] = DoNotCare()
    rest: Union[
        Optional["Name"],
        MetadataMatchType,
        MatchIfTrue[Optional[cst.Name]],
        DoNotCareSentinel,
        OneOf[
            Union[Optional["Name"], MetadataMatchType, MatchIfTrue[Optional[cst.Name]]]
        ],
        AllOf[
            Union[Optional["Name"], MetadataMatchType, MatchIfTrue[Optional[cst.Name]]]
        ],
    ] = DoNotCare()
    whitespace_before_rest: Union[
        SimpleWhitespaceMatchType,
        DoNotCareSentinel,
        OneOf[SimpleWhitespaceMatchType],
        AllOf[SimpleWhitespaceMatchType],
    ] = DoNotCare()
    trailing_comma: Union[
        Optional["Comma"],
        MetadataMatchType,
        MatchIfTrue[Optional[cst.Comma]],
        DoNotCareSentinel,
        OneOf[
            Union[
                Optional["Comma"], MetadataMatchType, MatchIfTrue[Optional[cst.Comma]]
            ]
        ],
        AllOf[
            Union[
                Optional["Comma"], MetadataMatchType, MatchIfTrue[Optional[cst.Comma]]
            ]
        ],
    ] = DoNotCare()
    lpar: Union[
        Sequence[
            Union[
                LeftParenMatchType,
                DoNotCareSentinel,
                OneOf[LeftParenMatchType],
                AllOf[LeftParenMatchType],
                AtLeastN[
                    Union[
                        LeftParenMatchType,
                        DoNotCareSentinel,
                        OneOf[LeftParenMatchType],
                        AllOf[LeftParenMatchType],
                    ]
                ],
                AtMostN[
                    Union[
                        LeftParenMatchType,
                        DoNotCareSentinel,
                        OneOf[LeftParenMatchType],
                        AllOf[LeftParenMatchType],
                    ]
                ],
            ]
        ],
        DoNotCareSentinel,
        MatchIfTrue[Sequence[cst.LeftParen]],
        OneOf[
            Union[
                Sequence[
                    Union[
                        LeftParenMatchType,
                        OneOf[LeftParenMatchType],
                        AllOf[LeftParenMatchType],
                        AtLeastN[
                            Union[
                                LeftParenMatchType,
                                OneOf[LeftParenMatchType],
                                AllOf[LeftParenMatchType],
                            ]
                        ],
                        AtMostN[
                            Union[
                                LeftParenMatchType,
                                OneOf[LeftParenMatchType],
                                AllOf[LeftParenMatchType],
                            ]
                        ],
                    ]
                ],
                MatchIfTrue[Sequence[cst.LeftParen]],
            ]
        ],
        AllOf[
            Union[
                Sequence[
                    Union[
                        LeftParenMatchType,
                        OneOf[LeftParenMatchType],
                        AllOf[LeftParenMatchType],
                        AtLeastN[
                            Union[
                                LeftParenMatchType,
                                OneOf[LeftParenMatchType],
                                AllOf[LeftParenMatchType],
                            ]
                        ],
                        AtMostN[
                            Union[
                                LeftParenMatchType,
                                OneOf[LeftParenMatchType],
                                AllOf[LeftParenMatchType],
                            ]
                        ],
                    ]
                ],
                MatchIfTrue[Sequence[cst.LeftParen]],
            ]
        ],
    ] = DoNotCare()
    rpar: Union[
        Sequence[
            Union[
                RightParenMatchType,
                DoNotCareSentinel,
                OneOf[RightParenMatchType],
                AllOf[RightParenMatchType],
                AtLeastN[
                    Union[
                        RightParenMatchType,
                        DoNotCareSentinel,
                        OneOf[RightParenMatchType],
                        AllOf[RightParenMatchType],
                    ]
                ],
                AtMostN[
                    Union[
                        RightParenMatchType,
                        DoNotCareSentinel,
                        OneOf[RightParenMatchType],
                        AllOf[RightParenMatchType],
                    ]
                ],
            ]
        ],
        DoNotCareSentinel,
        MatchIfTrue[Sequence[cst.RightParen]],
        OneOf[
            Union[
                Sequence[
                    Union[
                        RightParenMatchType,
                        OneOf[RightParenMatchType],
                        AllOf[RightParenMatchType],
                        AtLeastN[
                            Union[
                                RightParenMatchType,
                                OneOf[RightParenMatchType],
                                AllOf[RightParenMatchType],
                            ]
                        ],
                        AtMostN[
                            Union[
                                RightParenMatchType,
                                OneOf[RightParenMatchType],
                                AllOf[RightParenMatchType],
                            ]
                        ],
                    ]
                ],
                MatchIfTrue[Sequence[cst.RightParen]],
            ]
        ],
        AllOf[
            Union[
                Sequence[
                    Union[
                        RightParenMatchType,
                        OneOf[RightParenMatchType],
                        AllOf[RightParenMatchType],
                        AtLeastN[
                            Union[
                                RightParenMatchType,
                                OneOf[RightParenMatchType],
                                AllOf[RightParenMatchType],
                            ]
                        ],
                        AtMostN[
                            Union[
                                RightParenMatchType,
                                OneOf[RightParenMatchType],
                                AllOf[RightParenMatchType],
                            ]
                        ],
                    ]
                ],
                MatchIfTrue[Sequence[cst.RightParen]],
            ]
        ],
    ] = DoNotCare()
    metadata: Union[
        MetadataMatchType,
        DoNotCareSentinel,
        OneOf[MetadataMatchType],
        AllOf[MetadataMatchType],
    ] = DoNotCare()
