# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.


# This file was generated by libcst.codegen.gen_matcher_classes
from dataclasses import dataclass
from typing import Optional, Sequence, Union

import libcst as cst
from libcst.matchers._base import BaseFormattedStringContent
from libcst.matchers._match_types import (
    BaseExpressionMatchType,
    BaseParenthesizableWhitespaceMatchType,
    MetadataMatchType,
)
from libcst.matchers._matcher_base import (
    AllOf,
    BaseMatcherNode,
    DoNotCare,
    DoNotCareSentinel,
    MatchIfTrue,
    OneOf,
)
from libcst.matchers.nodes._assign_equal import AssignEqual


@dataclass(frozen=True, eq=False, unsafe_hash=False)
class FormattedStringExpression(BaseFormattedStringContent, BaseMatcherNode):
    expression: Union[
        BaseExpressionMatchType,
        DoNotCareSentinel,
        OneOf[BaseExpressionMatchType],
        AllOf[BaseExpressionMatchType],
    ] = DoNotCare()
    conversion: Union[
        Optional[str],
        MetadataMatchType,
        MatchIfTrue[Optional[str]],
        DoNotCareSentinel,
        OneOf[Union[Optional[str], MetadataMatchType, MatchIfTrue[Optional[str]]]],
        AllOf[Union[Optional[str], MetadataMatchType, MatchIfTrue[Optional[str]]]],
    ] = DoNotCare()
    format_spec: Union[
        Optional[Sequence["BaseFormattedStringContent"]],
        MetadataMatchType,
        MatchIfTrue[Optional[Sequence[cst.BaseFormattedStringContent]]],
        DoNotCareSentinel,
        OneOf[
            Union[
                Optional[Sequence["BaseFormattedStringContent"]],
                MetadataMatchType,
                MatchIfTrue[Optional[Sequence[cst.BaseFormattedStringContent]]],
            ]
        ],
        AllOf[
            Union[
                Optional[Sequence["BaseFormattedStringContent"]],
                MetadataMatchType,
                MatchIfTrue[Optional[Sequence[cst.BaseFormattedStringContent]]],
            ]
        ],
    ] = DoNotCare()
    whitespace_before_expression: Union[
        BaseParenthesizableWhitespaceMatchType,
        DoNotCareSentinel,
        OneOf[BaseParenthesizableWhitespaceMatchType],
        AllOf[BaseParenthesizableWhitespaceMatchType],
    ] = DoNotCare()
    whitespace_after_expression: Union[
        BaseParenthesizableWhitespaceMatchType,
        DoNotCareSentinel,
        OneOf[BaseParenthesizableWhitespaceMatchType],
        AllOf[BaseParenthesizableWhitespaceMatchType],
    ] = DoNotCare()
    equal: Union[
        Optional["AssignEqual"],
        MetadataMatchType,
        MatchIfTrue[Optional[cst.AssignEqual]],
        DoNotCareSentinel,
        OneOf[
            Union[
                Optional["AssignEqual"],
                MetadataMatchType,
                MatchIfTrue[Optional[cst.AssignEqual]],
            ]
        ],
        AllOf[
            Union[
                Optional["AssignEqual"],
                MetadataMatchType,
                MatchIfTrue[Optional[cst.AssignEqual]],
            ]
        ],
    ] = DoNotCare()
    metadata: Union[
        MetadataMatchType,
        DoNotCareSentinel,
        OneOf[MetadataMatchType],
        AllOf[MetadataMatchType],
    ] = DoNotCare()
