# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.


# This file was generated by libcst.codegen.gen_matcher_classes
from libcst.matchers._base import (
    BaseAssignTargetExpression,
    BaseAugOp,
    BaseBinaryOp,
    BaseBooleanOp,
    BaseComp,
    BaseCompOp,
    BaseCompoundStatement,
    BaseDelTargetExpression,
    BaseDict,
    BaseDictElement,
    BaseElement,
    BaseExpression,
    BaseFormattedStringContent,
    BaseList,
    BaseMetadataProvider,
    BaseNumber,
    BaseParenthesizableWhitespace,
    BaseSet,
    BaseSimpleComp,
    BaseSlice,
    BaseSmallStatement,
    BaseStatement,
    BaseString,
    BaseSuite,
    BaseUnaryOp,
)
from libcst.matchers._decorators import call_if_inside, call_if_not_inside, leave, visit
from libcst.matchers._matcher_base import (
    AllOf,
    AtLeastN,
    AtMostN,
    BaseMatcherNode,
    DoesNotMatch,
    DoNotCare,
    DoNotCareSentinel,
    extract,
    extractall,
    findall,
    matches,
    MatchIfTrue,
    MatchMetadata,
    MatchMetadataIfTrue,
    MatchRegex,
    OneOf,
    replace,
    SaveMatchedNode,
    TypeOf,
    ZeroOrMore,
    ZeroOrOne,
)
from libcst.matchers._visitors import (
    MatchDecoratorMismatch,
    MatcherDecoratableTransformer,
    MatcherDecoratableVisitor,
)
from libcst.matchers.nodes._add import Add
from libcst.matchers.nodes._add_assign import AddAssign
from libcst.matchers.nodes._and import And
from libcst.matchers.nodes._ann_assign import AnnAssign
from libcst.matchers.nodes._annotation import Annotation
from libcst.matchers.nodes._arg import Arg
from libcst.matchers.nodes._as_name import AsName
from libcst.matchers.nodes._assert import Assert
from libcst.matchers.nodes._assign import Assign
from libcst.matchers.nodes._assign_equal import AssignEqual
from libcst.matchers.nodes._assign_target import AssignTarget
from libcst.matchers.nodes._asynchronous import Asynchronous
from libcst.matchers.nodes._attribute import Attribute
from libcst.matchers.nodes._aug_assign import AugAssign
from libcst.matchers.nodes._await import Await
from libcst.matchers.nodes._binary_operation import BinaryOperation
from libcst.matchers.nodes._bit_and import BitAnd
from libcst.matchers.nodes._bit_and_assign import BitAndAssign
from libcst.matchers.nodes._bit_invert import BitInvert
from libcst.matchers.nodes._bit_or import BitOr
from libcst.matchers.nodes._bit_or_assign import BitOrAssign
from libcst.matchers.nodes._bit_xor import BitXor
from libcst.matchers.nodes._bit_xor_assign import BitXorAssign
from libcst.matchers.nodes._boolean_operation import BooleanOperation
from libcst.matchers.nodes._break import Break
from libcst.matchers.nodes._call import Call
from libcst.matchers.nodes._class_def import ClassDef
from libcst.matchers.nodes._colon import Colon
from libcst.matchers.nodes._comma import Comma
from libcst.matchers.nodes._comment import Comment
from libcst.matchers.nodes._comp_for import CompFor
from libcst.matchers.nodes._comp_if import CompIf
from libcst.matchers.nodes._comparison import Comparison
from libcst.matchers.nodes._comparison_target import ComparisonTarget
from libcst.matchers.nodes._concatenated_string import ConcatenatedString
from libcst.matchers.nodes._continue import Continue
from libcst.matchers.nodes._decorator import Decorator
from libcst.matchers.nodes._del import Del
from libcst.matchers.nodes._dict import Dict
from libcst.matchers.nodes._dict_comp import DictComp
from libcst.matchers.nodes._dict_element import DictElement
from libcst.matchers.nodes._divide import Divide
from libcst.matchers.nodes._divide_assign import DivideAssign
from libcst.matchers.nodes._dot import Dot
from libcst.matchers.nodes._element import Element
from libcst.matchers.nodes._ellipsis import Ellipsis
from libcst.matchers.nodes._else import Else
from libcst.matchers.nodes._empty_line import EmptyLine
from libcst.matchers.nodes._equal import Equal
from libcst.matchers.nodes._except_handler import ExceptHandler
from libcst.matchers.nodes._except_star_handler import ExceptStarHandler
from libcst.matchers.nodes._expr import Expr
from libcst.matchers.nodes._finally import Finally
from libcst.matchers.nodes._float import Float
from libcst.matchers.nodes._floor_divide import FloorDivide
from libcst.matchers.nodes._floor_divide_assign import FloorDivideAssign
from libcst.matchers.nodes._for import For
from libcst.matchers.nodes._formatted_string import FormattedString
from libcst.matchers.nodes._formatted_string_expression import FormattedStringExpression
from libcst.matchers.nodes._formatted_string_text import FormattedStringText
from libcst.matchers.nodes._from import From
from libcst.matchers.nodes._function_def import FunctionDef
from libcst.matchers.nodes._generator_exp import GeneratorExp
from libcst.matchers.nodes._global import Global
from libcst.matchers.nodes._greater_than import GreaterThan
from libcst.matchers.nodes._greater_than_equal import GreaterThanEqual
from libcst.matchers.nodes._if import If
from libcst.matchers.nodes._if_exp import IfExp
from libcst.matchers.nodes._imaginary import Imaginary
from libcst.matchers.nodes._import import Import
from libcst.matchers.nodes._import_alias import ImportAlias
from libcst.matchers.nodes._import_from import ImportFrom
from libcst.matchers.nodes._import_star import ImportStar
from libcst.matchers.nodes._in import In
from libcst.matchers.nodes._indented_block import IndentedBlock
from libcst.matchers.nodes._index import Index
from libcst.matchers.nodes._integer import Integer
from libcst.matchers.nodes._is import Is
from libcst.matchers.nodes._is_not import IsNot
from libcst.matchers.nodes._lambda import Lambda
from libcst.matchers.nodes._left_curly_brace import LeftCurlyBrace
from libcst.matchers.nodes._left_paren import LeftParen
from libcst.matchers.nodes._left_shift import LeftShift
from libcst.matchers.nodes._left_shift_assign import LeftShiftAssign
from libcst.matchers.nodes._left_square_bracket import LeftSquareBracket
from libcst.matchers.nodes._less_than import LessThan
from libcst.matchers.nodes._less_than_equal import LessThanEqual
from libcst.matchers.nodes._list import List
from libcst.matchers.nodes._list_comp import ListComp
from libcst.matchers.nodes._match import Match
from libcst.matchers.nodes._match_as import MatchAs
from libcst.matchers.nodes._match_case import MatchCase
from libcst.matchers.nodes._match_class import MatchClass
from libcst.matchers.nodes._match_keyword_element import MatchKeywordElement
from libcst.matchers.nodes._match_list import MatchList
from libcst.matchers.nodes._match_mapping import MatchMapping
from libcst.matchers.nodes._match_mapping_element import MatchMappingElement
from libcst.matchers.nodes._match_or import MatchOr
from libcst.matchers.nodes._match_or_element import MatchOrElement
from libcst.matchers.nodes._match_pattern import MatchPattern
from libcst.matchers.nodes._match_sequence import MatchSequence
from libcst.matchers.nodes._match_sequence_element import MatchSequenceElement
from libcst.matchers.nodes._match_singleton import MatchSingleton
from libcst.matchers.nodes._match_star import MatchStar
from libcst.matchers.nodes._match_tuple import MatchTuple
from libcst.matchers.nodes._match_value import MatchValue
from libcst.matchers.nodes._matrix_multiply import MatrixMultiply
from libcst.matchers.nodes._matrix_multiply_assign import MatrixMultiplyAssign
from libcst.matchers.nodes._minus import Minus
from libcst.matchers.nodes._module import Module
from libcst.matchers.nodes._modulo import Modulo
from libcst.matchers.nodes._modulo_assign import ModuloAssign
from libcst.matchers.nodes._multiply import Multiply
from libcst.matchers.nodes._multiply_assign import MultiplyAssign
from libcst.matchers.nodes._name import Name
from libcst.matchers.nodes._name_item import NameItem
from libcst.matchers.nodes._named_expr import NamedExpr
from libcst.matchers.nodes._newline import Newline
from libcst.matchers.nodes._nonlocal import Nonlocal
from libcst.matchers.nodes._not import Not
from libcst.matchers.nodes._not_equal import NotEqual
from libcst.matchers.nodes._not_in import NotIn
from libcst.matchers.nodes._or import Or
from libcst.matchers.nodes._param import Param
from libcst.matchers.nodes._param_slash import ParamSlash
from libcst.matchers.nodes._param_spec import ParamSpec
from libcst.matchers.nodes._param_star import ParamStar
from libcst.matchers.nodes._parameters import Parameters
from libcst.matchers.nodes._parenthesized_whitespace import ParenthesizedWhitespace
from libcst.matchers.nodes._pass import Pass
from libcst.matchers.nodes._plus import Plus
from libcst.matchers.nodes._power import Power
from libcst.matchers.nodes._power_assign import PowerAssign
from libcst.matchers.nodes._raise import Raise
from libcst.matchers.nodes._return import Return
from libcst.matchers.nodes._right_curly_brace import RightCurlyBrace
from libcst.matchers.nodes._right_paren import RightParen
from libcst.matchers.nodes._right_shift import RightShift
from libcst.matchers.nodes._right_shift_assign import RightShiftAssign
from libcst.matchers.nodes._right_square_bracket import RightSquareBracket
from libcst.matchers.nodes._semicolon import Semicolon
from libcst.matchers.nodes._set import Set
from libcst.matchers.nodes._set_comp import SetComp
from libcst.matchers.nodes._simple_statement_line import SimpleStatementLine
from libcst.matchers.nodes._simple_statement_suite import SimpleStatementSuite
from libcst.matchers.nodes._simple_string import SimpleString
from libcst.matchers.nodes._simple_whitespace import SimpleWhitespace
from libcst.matchers.nodes._slice import Slice
from libcst.matchers.nodes._starred_dict_element import StarredDictElement
from libcst.matchers.nodes._starred_element import StarredElement
from libcst.matchers.nodes._subscript import Subscript
from libcst.matchers.nodes._subscript_element import SubscriptElement
from libcst.matchers.nodes._subtract import Subtract
from libcst.matchers.nodes._subtract_assign import SubtractAssign
from libcst.matchers.nodes._trailing_whitespace import TrailingWhitespace
from libcst.matchers.nodes._try import Try
from libcst.matchers.nodes._try_star import TryStar
from libcst.matchers.nodes._tuple import Tuple
from libcst.matchers.nodes._type_alias import TypeAlias
from libcst.matchers.nodes._type_param import TypeParam
from libcst.matchers.nodes._type_parameters import TypeParameters
from libcst.matchers.nodes._type_var import TypeVar
from libcst.matchers.nodes._type_var_tuple import TypeVarTuple
from libcst.matchers.nodes._unary_operation import UnaryOperation
from libcst.matchers.nodes._while import While
from libcst.matchers.nodes._with import With
from libcst.matchers.nodes._with_item import WithItem
from libcst.matchers.nodes._yield import Yield

__all__ = [
    "Add",
    "AddAssign",
    "AllOf",
    "And",
    "AnnAssign",
    "Annotation",
    "Arg",
    "AsName",
    "Assert",
    "Assign",
    "AssignEqual",
    "AssignTarget",
    "Asynchronous",
    "AtLeastN",
    "AtMostN",
    "Attribute",
    "AugAssign",
    "Await",
    "BaseAssignTargetExpression",
    "BaseAugOp",
    "BaseBinaryOp",
    "BaseBooleanOp",
    "BaseComp",
    "BaseCompOp",
    "BaseCompoundStatement",
    "BaseDelTargetExpression",
    "BaseDict",
    "BaseDictElement",
    "BaseElement",
    "BaseExpression",
    "BaseFormattedStringContent",
    "BaseList",
    "BaseMatcherNode",
    "BaseMetadataProvider",
    "BaseNumber",
    "BaseParenthesizableWhitespace",
    "BaseSet",
    "BaseSimpleComp",
    "BaseSlice",
    "BaseSmallStatement",
    "BaseStatement",
    "BaseString",
    "BaseSuite",
    "BaseUnaryOp",
    "BinaryOperation",
    "BitAnd",
    "BitAndAssign",
    "BitInvert",
    "BitOr",
    "BitOrAssign",
    "BitXor",
    "BitXorAssign",
    "BooleanOperation",
    "Break",
    "Call",
    "ClassDef",
    "Colon",
    "Comma",
    "Comment",
    "CompFor",
    "CompIf",
    "Comparison",
    "ComparisonTarget",
    "ConcatenatedString",
    "Continue",
    "Decorator",
    "Del",
    "Dict",
    "DictComp",
    "DictElement",
    "Divide",
    "DivideAssign",
    "DoNotCare",
    "DoNotCareSentinel",
    "DoesNotMatch",
    "Dot",
    "Element",
    "Ellipsis",
    "Else",
    "EmptyLine",
    "Equal",
    "ExceptHandler",
    "ExceptStarHandler",
    "Expr",
    "Finally",
    "Float",
    "FloorDivide",
    "FloorDivideAssign",
    "For",
    "FormattedString",
    "FormattedStringExpression",
    "FormattedStringText",
    "From",
    "FunctionDef",
    "GeneratorExp",
    "Global",
    "GreaterThan",
    "GreaterThanEqual",
    "If",
    "IfExp",
    "Imaginary",
    "Import",
    "ImportAlias",
    "ImportFrom",
    "ImportStar",
    "In",
    "IndentedBlock",
    "Index",
    "Integer",
    "Is",
    "IsNot",
    "Lambda",
    "LeftCurlyBrace",
    "LeftParen",
    "LeftShift",
    "LeftShiftAssign",
    "LeftSquareBracket",
    "LessThan",
    "LessThanEqual",
    "List",
    "ListComp",
    "Match",
    "MatchAs",
    "MatchCase",
    "MatchClass",
    "MatchDecoratorMismatch",
    "MatchIfTrue",
    "MatchKeywordElement",
    "MatchList",
    "MatchMapping",
    "MatchMappingElement",
    "MatchMetadata",
    "MatchMetadataIfTrue",
    "MatchOr",
    "MatchOrElement",
    "MatchPattern",
    "MatchRegex",
    "MatchSequence",
    "MatchSequenceElement",
    "MatchSingleton",
    "MatchStar",
    "MatchTuple",
    "MatchValue",
    "MatcherDecoratableTransformer",
    "MatcherDecoratableVisitor",
    "MatrixMultiply",
    "MatrixMultiplyAssign",
    "Minus",
    "Module",
    "Modulo",
    "ModuloAssign",
    "Multiply",
    "MultiplyAssign",
    "Name",
    "NameItem",
    "NamedExpr",
    "Newline",
    "Nonlocal",
    "Not",
    "NotEqual",
    "NotIn",
    "OneOf",
    "Or",
    "Param",
    "ParamSlash",
    "ParamSpec",
    "ParamStar",
    "Parameters",
    "ParenthesizedWhitespace",
    "Pass",
    "Plus",
    "Power",
    "PowerAssign",
    "Raise",
    "Return",
    "RightCurlyBrace",
    "RightParen",
    "RightShift",
    "RightShiftAssign",
    "RightSquareBracket",
    "SaveMatchedNode",
    "Semicolon",
    "Set",
    "SetComp",
    "SimpleStatementLine",
    "SimpleStatementSuite",
    "SimpleString",
    "SimpleWhitespace",
    "Slice",
    "StarredDictElement",
    "StarredElement",
    "Subscript",
    "SubscriptElement",
    "Subtract",
    "SubtractAssign",
    "TrailingWhitespace",
    "Try",
    "TryStar",
    "Tuple",
    "TypeAlias",
    "TypeOf",
    "TypeParam",
    "TypeParameters",
    "TypeVar",
    "TypeVarTuple",
    "UnaryOperation",
    "While",
    "With",
    "WithItem",
    "Yield",
    "ZeroOrMore",
    "ZeroOrOne",
    "call_if_inside",
    "call_if_not_inside",
    "extract",
    "extractall",
    "findall",
    "leave",
    "matches",
    "replace",
    "visit",
]
